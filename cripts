GIT-CREDENTIAL(1)                               Git Manual                              GIT-CREDENTIAL(1)

NNAAMMEE
       git-credential - Retrieve and store user credentials

SSYYNNOOPPSSIISS
       git credential <fill|approve|reject>

DDEESSCCRRIIPPTTIIOONN
       Git has an internal interface for storing and retrieving credentials from system-specific helpers,
       as well as prompting the user for usernames and passwords. The git-credential command exposes this
       interface to scripts which may want to retrieve, store, or prompt for credentials in the same
       manner as Git. The design of this scriptable interface models the internal C API; see credential.h
       for more background on the concepts.

       git-credential takes an "action" option on the command-line (one of ffiillll, aapppprroovvee, or rreejjeecctt) and
       reads a credential description on stdin (see INPUT/OUTPUT FORMAT).

       If the action is ffiillll, git-credential will attempt to add "username" and "password" attributes to
       the description by reading config files, by contacting any configured credential helpers, or by
       prompting the user. The username and password attributes of the credential description are then
       printed to stdout together with the attributes already provided.

       If the action is aapppprroovvee, git-credential will send the description to any configured credential
       helpers, which may store the credential for later use.

       If the action is rreejjeecctt, git-credential will send the description to any configured credential
       helpers, which may erase any stored credential matching the description.

       If the action is aapppprroovvee or rreejjeecctt, no output should be emitted.

TTYYPPIICCAALL UUSSEE OOFF GGIITT CCRREEDDEENNTTIIAALL
       An application using git-credential will typically use ggiitt ccrreeddeennttiiaall following these steps:

        1. Generate a credential description based on the context.

           For example, if we want a password for hhttttppss::////eexxaammppllee..ccoomm//ffoooo..ggiitt, we might generate the
           following credential description (don’t forget the blank line at the end; it tells ggiitt
           ccrreeddeennttiiaall that the application finished feeding all the information it has):

               protocol=https
               host=example.com
               path=foo.git

        2. Ask git-credential to give us a username and password for this description. This is done by
           running ggiitt ccrreeddeennttiiaall ffiillll, feeding the description from step (1) to its standard input. The
           complete credential description (including the credential per se, i.e. the login and password)
           will be produced on standard output, like:

               protocol=https
               host=example.com
               username=bob
               password=secr3t

           In most cases, this means the attributes given in the input will be repeated in the output,
           but Git may also modify the credential description, for example by removing the ppaatthh attribute
           when the protocol is HTTP(s) and ccrreeddeennttiiaall..uusseeHHttttppPPaatthh is false.

           If the ggiitt ccrreeddeennttiiaall knew about the password, this step may not have involved the user
           actually typing this password (the user may have typed a password to unlock the keychain
           instead, or no user interaction was done if the keychain was already unlocked) before it
           returned ppaasssswwoorrdd==sseeccrr33tt.

        3. Use the credential (e.g., access the URL with the username and password from step (2)), and
           see if it’s accepted.

        4. Report on the success or failure of the password. If the credential allowed the operation to
           complete successfully, then it can be marked with an "approve" action to tell ggiitt ccrreeddeennttiiaall
           to reuse it in its next invocation. If the credential was rejected during the operation, use
           the "reject" action so that ggiitt ccrreeddeennttiiaall will ask for a new password in its next invocation.
           In either case, ggiitt ccrreeddeennttiiaall should be fed with the credential description obtained from
           step (2) (which also contain the ones provided in step (1)).

IINNPPUUTT//OOUUTTPPUUTT FFOORRMMAATT
       ggiitt ccrreeddeennttiiaall reads and/or writes (depending on the action used) credential information in its
       standard input/output. This information can correspond either to keys for which ggiitt ccrreeddeennttiiaall
       will obtain the login information (e.g. host, protocol, path), or to the actual credential data to
       be obtained (username/password).

       The credential is split into a set of named attributes, with one attribute per line. Each
       attribute is specified by a key-value pair, separated by an == (equals) sign, followed by a
       newline.

       The key may contain any bytes except ==, newline, or NUL. The value may contain any bytes except
       newline or NUL.

       In both cases, all bytes are treated as-is (i.e., there is no quoting, and one cannot transmit a
       value with newline or NUL in it). The list of attributes is terminated by a blank line or
       end-of-file.

       Git understands the following attributes:

       pprroottooccooll
           The protocol over which the credential will be used (e.g., hhttttppss).

       hhoosstt
           The remote hostname for a network credential. This includes the port number if one was
           specified (e.g., "example.com:8088").

       ppaatthh
           The path with which the credential will be used. E.g., for accessing a remote https
           repository, this will be the repository’s path on the server.

       uusseerrnnaammee
           The credential’s username, if we already have one (e.g., from a URL, the configuration, the
           user, or from a previously run helper).

       ppaasssswwoorrdd
           The credential’s password, if we are asking it to be stored.

       uurrll
           When this special attribute is read by ggiitt ccrreeddeennttiiaall, the value is parsed as a URL and
           treated as if its constituent parts were read (e.g., uurrll==hhttttppss::////eexxaammppllee..ccoomm would behave as
           if pprroottooccooll==hhttttppss and hhoosstt==eexxaammppllee..ccoomm had been provided). This can help callers avoid parsing
           URLs themselves.

           Note that specifying a protocol is mandatory and if the URL doesn’t specify a hostname (e.g.,
           "cert:///path/to/file") the credential will contain a hostname attribute whose value is an
           empty string.

           Components which are missing from the URL (e.g., there is no username in the example above)
           will be left unset.

GGIITT
       Part of the ggiitt(1) suite

Git 2.34.1                                      05/20/2024                              GIT-CREDENTIAL(1)
